/**
 * @author javdevgames http://coding.javdev.com
 *
 * DepthBufferTests
 * The MIT License (MIT)
 * Copyright (c) 2015 javdevgames
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 */
 
use namespace flare;
use namespace flare.transforms;
use namespace flare.blendMode;

sampler2D colorBuffer;
sampler2D effectBuffer;
sampler2D materialTexture;
sampler2D bloomTexture < bias = 45, wrap = WRAP_CLAMP >;

param float power = 2;
param float intensity = 4;


// blur constants.
const float TEX_SIZE = 512;
const float blurSize = 1 / TEX_SIZE;
const float2 hSize0 = float2( blurSize, 0 );
const float2 hSize1 = float2( blurSize * 2, 0 );
const float2 vSize0 = float2( 0, blurSize );
const float2 vSize1 = float2( 0, blurSize * 2 );

// horizontal blur.
float4 blurX( sampler2D texture ) {
	float4 sum;
	interpolated float2 i0 = uv0 - hSize0;
	interpolated float2 i1 = uv0 + hSize0;
	interpolated float2 i2 = uv0 - hSize1;
	interpolated float2 i3 = uv0 + hSize1;
	sum  = sampler2D( texture, i0 );
	sum += sampler2D( texture, i1 );
	sum += sampler2D( texture, i2 );
	sum += sampler2D( texture, i3 );
	return float4( sum.rgb * 0.5, 1 );
}

// vertical blur.
float4 blurY( sampler2D texture ) {
   float4 sum;
	interpolated float2 i0 = uv0 - vSize0;
	interpolated float2 i1 = uv0 + vSize0;
	interpolated float2 i2 = uv0 - vSize1;
	interpolated float2 i3 = uv0 + vSize1;
	sum  = sampler2D( texture, i0 );
	sum += sampler2D( texture, i1 );
	sum += sampler2D( texture, i2 );
	sum += sampler2D( texture, i3 );
   return float4( sum.rgb * 0.25, 1 );
}

technique main
{
	float4 pos = transform();
	
	output vertex = pos;
	
	interpolated float4 iPos = pos / 300;
	
	
	float4 blur = blurX(materialTexture);
	
	output fragment[3];
	fragment[0] = sampler2D( materialTexture, iUV0 );
	fragment[1] = iPos.w;
	fragment[2] = pow( blur, power ) * intensity;
}

technique compose
{
	float4 color = sampler2D(colorBuffer, iUV0);
	float4 effects = sampler2D(effectBuffer, iUV0);
	float4 bloomEffect = sampler2D(bloomTexture, iUV0);

	//float4 gData = add(color, effects );	
	//gData = add(gData, bloomEffect);
	
	float4 gData = add(bloomEffect, color);	
	
	output vertex = position.xyzw;
	output fragment = float4(gData.rgb, 1);
}